{
    "MediaService": {
        "comment": {
            "shortText": [
                "This class is used to provide media responsibility.",
                "It can support electron & normal web platform."
            ]
        },
        "properties": {
            "sdkWrapper": {
                "comment": {
                    "shortText": [
                        "This property provide sdk wrapper instance,",
                        "It contains web or electron platform api ability.",
                        "It suppose be only for specified scenario, when the media service dosen't support."
                    ]
                }
            },
            "cameraTestRenderer": {
                "comment": {
                    "shortText": [
                        "This property provide preview test camera renderer,",
                        "It generally works with device testing scenario or preview camera device.",
                        "It generated by @link openTestCamera method"
                    ]
                }
            },
            "cameraRenderer": {
                "comment": {
                    "shortText": [
                        "This property provide living camera renderer,",
                        "It supposed be used in to joined media-service context.",
                        "It generated by @link openCamera method"
                    ]
                }
            },
            "screenRenderer": {
                "comment": {
                    "shortText": [
                        "This property provide living screen share renderer,",
                        "It supposed be used in to joined media-service context.",
                        "It generated by screen sharing method"
                    ]
                }
            },
            "remoteUsersRenderer": {
                "comment": {
                    "shortText": [
                        "This property provide living remote user renderer.",
                        "It supposed be used in to joined media-service context.",
                        "The RemoteUserRenderer provide the web & electron platform render object.",
                        "You can invoke play method with it to render the remote user video"
                    ]
                }
            },
            "screenShareIds": {
                "comment": {
                    "shortText": "screen share ids"
                }
            }
        },
        "methods": {
            "getTestCameraLabel": {
                "comment": {
                    "shortText": "get current used test camera device label",
                    "returns": "label @paramType string\n"
                }
            },
            "getTestMicrophoneLabel": {
                "comment": {
                    "shortText": "get current used test microphone device label",
                    "returns": "label @paramType string\n"
                }
            },
            "getCameraLabel": {
                "comment": {
                    "shortText": "get current used camera device label",
                    "returns": "label @paramType string\n"
                }
            },
            "getSpeakerLabel": {
                "comment": {
                    "shortText": [
                        "get current used speaker device label.",
                        "WARN: It is only work correctly in electron platform."
                    ],
                    "returns": "label @paramType string\n"
                }
            },
            "getMicrophoneLabel": {
                "comment": {
                    "shortText": "get current used microphone device label",
                    "returns": "label @paramType string\n"
                }
            },
            "changePlaybackVolume": {
                "comment": {
                    "shortText": [
                        "This is method change the current item's playback volume.",
                        "In electron platform, it will effect the system volume.",
                        "In web platform, it only effect the related its own media element's volume."
                    ]
                }
            },
            "muteRemoteVideo": {
                "comment": {
                    "shortText": "This async method is used to mute/unmute specified remote video by passed uid and val",
                    "returns": "Promise<any>\n"
                }
            },
            "muteRemoteAudio": {
                "comment": {
                    "shortText": "This async method is used to mute/unmute specified remote audio by passed uid and val",
                    "returns": "Promise<any>\n"
                }
            },
            "muteRemoteVideoByClient": {
                "comment": {
                    "shortText": [
                        "This async method is used to mute/unmute specified client and remote video by passed uid and val",
                        "This method is only provided for web platform."
                    ],
                    "returns": "Promise<any>\n"
                }
            },
            "muteRemoteAudioByClient": {
                "comment": {
                    "shortText": [
                        "This async method is used to mute/unmute specified client and remote audio by passed uid and val",
                        "This method is only provided for web platform."
                    ],
                    "returns": "Promise<any>\n"
                }
            },
            "init": {
                "comment": {
                    "shortText": "This method is init the media-service lifecycle"
                }
            },
            "release": {
                "comment": {
                    "shortText": "This method is release the media-service lifecycle"
                }
            },
            "join": {
                "comment": {
                    "shortText": [
                        "This method is used to join media channel",
                        "so that you can interactive your media ability with other participants in the same channel"
                    ],
                    "returns": "join result @paramType Promise<any>\n"
                }
            },
            "leave": {
                "comment": {
                    "shortText": [
                        "This method is used to leave media channel",
                        "so that you can stop interactive your media ability with other participants in the same channel"
                    ],
                    "returns": "leave result @paramType Promise<any>\n"
                }
            },
            "joinChannel": {
                "comment": {
                    "shortText": [
                        "This method is used to join sub channel media channel",
                        "so that you can start interactive your media ability with other participants in the same channel"
                    ],
                    "returns": "join result @paramType Promise<any>\n"
                }
            },
            "leaveChannel": {
                "comment": {
                    "shortText": [
                        "This method is used to leave sub channel media channel",
                        "so that you can stop interactive your media ability with other participants in the same channel"
                    ],
                    "returns": "leave result @paramType Promise<any>\n"
                }
            },
            "publish": {
                "comment": {
                    "shortText": [
                        "This method is used to publish media in the joined channel",
                        "so that you can start interactive your media ability with other participants in the same channel"
                    ],
                    "returns": "publish result @paramType Promise<any>\n"
                }
            },
            "unpublish": {
                "comment": {
                    "shortText": [
                        "This method is used to unpublish media in the joined channel",
                        "so that you can stop interactive your media ability with other participants in the same channel"
                    ],
                    "returns": "unpublish result @paramType Promise<any>\n"
                }
            },
            "openCamera": {
                "comment": {
                    "shortText": [
                        "This method is used to openCamera in the joined channel",
                        "so that you can start interactive your camera ability with other participants in the same channel"
                    ],
                    "returns": "openCamera result @paramType Promise<any>\n"
                }
            },
            "changeCamera": {
                "comment": {
                    "shortText": [
                        "This method is used to changeCamera in the joined channel",
                        "so that you can interactive switch another camera ability with other participants in the same channel"
                    ],
                    "returns": "changeCamera result @paramType Promise<any>\n"
                }
            },
            "closeCamera": {
                "comment": {
                    "shortText": [
                        "This method is used to close in the joined channel",
                        "so that you can stop interactive your camera ability with other participants in the same channel"
                    ],
                    "returns": "closeCamera result @paramType Promise<any>\n"
                }
            },
            "openMicrophone": {
                "comment": {
                    "shortText": [
                        "This method is used to openMicrophone in the joined channel",
                        "so that you can start interactive your microphone ability with other participants in the same channel"
                    ],
                    "returns": "openMicrophone result @paramType Promise<any>\n"
                }
            },
            "changeMicrophone": {
                "comment": {
                    "shortText": [
                        "This method is used to changeMicrophone in the joined channel",
                        "so that you can interactive switch another microphone ability with other participants in the same channel"
                    ],
                    "returns": "changeMicrophone result @paramType Promise<any>\n"
                }
            },
            "closeMicrophone": {
                "comment": {
                    "shortText": [
                        "This method is used to close in the joined channel",
                        "so that you can stop interactive your microphone ability with other participants in the same channel"
                    ],
                    "returns": "closeMicrophone result @paramType Promise<any>\n"
                }
            },
            "openTestCamera": {
                "comment": {
                    "shortText": "This method is used to open test camera",
                    "returns": "result @paramType Promise<any>\n"
                }
            },
            "closeTestCamera": {
                "comment": {
                    "shortText": "This method is used to close test camera",
                    "returns": "undefined @paramType void\n"
                }
            },
            "changeTestCamera": {
                "comment": {
                    "shortText": "This method is used to change test camera device",
                    "returns": "result @paramType Promise<any>\n"
                }
            },
            "changeTestResolution": {
                "comment": {
                    "shortText": "This method is used to change test camera",
                    "returns": "result @paramType Promise<any>\n"
                }
            },
            "openTestMicrophone": {
                "comment": {
                    "shortText": "This method is used to open test microphone",
                    "returns": "result @paramType Promise<any>\n"
                }
            },
            "closeTestMicrophone": {
                "comment": {
                    "shortText": "This method is used to close test microphone",
                    "returns": "undefined @paramType void\n"
                }
            },
            "changeTestMicrophone": {
                "comment": {
                    "shortText": "This method is used to change test microphone device",
                    "returns": "result @paramType Promise<any>\n"
                }
            },
            "getCameras": {
                "comment": {
                    "shortText": "This method get the platform related cameras list.",
                    "returns": "cameras list @paramType Promise<any[]>\n"
                }
            },
            "getMicrophones": {
                "comment": {
                    "shortText": "This method get the platform related microphones list.",
                    "returns": "microphones list @paramType Promise<any[]>\n"
                }
            },
            "prepareScreenShare": {
                "comment": {
                    "shortText": [
                        "This method is used to prepare screen sharing for permission checking.",
                        "In macos catalina system, start screen sharing need grant permission."
                    ],
                    "returns": "prepare result @paramType Promise<any>\n"
                }
            },
            "startScreenShare": {
                "comment": {
                    "shortText": [
                        "This method is used to start screen sharing.",
                        "It will interactive with same channel's participants."
                    ],
                    "returns": "start result @paramType Promise<any>\n"
                }
            },
            "stopScreenShare": {
                "comment": {
                    "shortText": "This method is used to stop screen sharing",
                    "returns": "stop result @paramType Promise<any>\n"
                }
            },
            "changeResolution": {
                "comment": {
                    "shortText": [
                        "This method is only work for change camera device resolution.",
                        "It will effect the published camera sender resolution."
                    ],
                    "returns": "changeResolution result @paramType Promise<any>\n"
                }
            },
            "getPlaybackVolume": {
                "comment": {
                    "shortText": "This method is supposed be used in electron platform"
                }
            },
            "reset": {
                "comment": {
                    "shortText": "reset media-service state"
                }
            },
            "listenerCount": {
                "comment": {}
            }
        },
        "accessors": {
            "isWeb": {
                "getter": {
                    "comment": {
                        "shortText": [
                            "get current platform check.",
                            "check web platform"
                        ],
                        "returns": "check web platform result @paramType boolean\n"
                    }
                }
            },
            "isElectron": {
                "getter": {
                    "comment": {
                        "shortText": [
                            "get current platform check.",
                            "check electron platform"
                        ],
                        "returns": "check electron platform result @paramType boolean\n"
                    }
                }
            },
            "web": {
                "getter": {
                    "comment": {
                        "returns": "web platform rtc wrapper @link AgoraWebRtcWrapper\n"
                    }
                }
            },
            "electron": {
                "getter": {
                    "comment": {
                        "returns": "electron platform rtc wrapper @link AgoraElectronRTCWrapper\n"
                    }
                }
            }
        }
    }
}